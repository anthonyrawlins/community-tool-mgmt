name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Security and dependency checks
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=high
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high

      - name: Check for vulnerabilities
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  # Backend tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: security

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ballarat_tools_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Run database migrations
        run: cd backend && npm run migrate:test
        env:
          DATABASE_URL: postgres://postgres:test_password@localhost:5432/ballarat_tools_test
          NODE_ENV: test

      - name: Run backend tests
        run: cd backend && npm run test
        env:
          DATABASE_URL: postgres://postgres:test_password@localhost:5432/ballarat_tools_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret
          STRIPE_SECRET_KEY: sk_test_fake_key_for_testing

      - name: Generate test coverage
        run: cd backend && npm run test:coverage
        env:
          DATABASE_URL: postgres://postgres:test_password@localhost:5432/ballarat_tools_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Frontend tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: security

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run frontend tests
        run: cd frontend && npm run test
        env:
          NODE_ENV: test

      - name: Run E2E tests
        run: cd frontend && npm run test:e2e
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:8000

      - name: Generate test coverage
        run: cd frontend && npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Build and test Docker images
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./Dockerfile.backend
          push: false
          tags: ballarat-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./Dockerfile.frontend
          push: false
          tags: ballarat-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'

    environment:
      name: staging
      url: https://ballarat-tools-staging.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Deploy to Vercel (Frontend)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod --env NODE_ENV=production'

      - name: Deploy to Railway (Backend)
        uses: railway-deploy-action@v1
        with:
          api-key: ${{ secrets.RAILWAY_API_KEY }}
          project-id: ${{ secrets.RAILWAY_PROJECT_ID }}
          service-name: ballarat-backend-staging
          environment: staging

      - name: Run staging smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60
          # Run basic health checks
          curl -f https://ballarat-tools-staging.vercel.app/api/health
          curl -f https://ballarat-tools-api-staging.railway.app/api/health

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://ballarattoollibrary.org.au

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run database migrations (Production)
        run: |
          cd backend
          npm ci
          npm run migrate:prod
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}

      - name: Deploy to Vercel (Frontend)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_PROD }}
          working-directory: ./frontend
          vercel-args: '--prod --env NODE_ENV=production'

      - name: Deploy to Railway (Backend)
        uses: railway-deploy-action@v1
        with:
          api-key: ${{ secrets.RAILWAY_API_KEY }}
          project-id: ${{ secrets.RAILWAY_PROJECT_ID_PROD }}
          service-name: ballarat-backend-prod
          environment: production

      - name: Run production smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60
          # Run basic health checks
          curl -f https://ballarattoollibrary.org.au/api/health
          curl -f https://api.ballarattoollibrary.org.au/api/health

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful! üöÄ'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed! ‚ùå'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  # Performance and security scans
  performance-scan:
    name: Performance & Security Scan
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://ballarat-tools-staging.vercel.app
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Security scan with OWASP ZAP
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://ballarat-tools-staging.vercel.app'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'