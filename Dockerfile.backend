# Backend Dockerfile for Node.js/Express API
FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    curl \
    dumb-init \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001

FROM base AS deps
WORKDIR /app

# Copy package files
COPY backend/package*.json ./
COPY backend/yarn.lock* ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

FROM base AS builder
WORKDIR /app

# Copy package files and install all dependencies (including dev)
COPY backend/package*.json ./
COPY backend/yarn.lock* ./
RUN npm ci

# Copy backend source code
COPY backend/src ./src
COPY backend/prisma ./prisma
COPY backend/tsconfig.json ./
COPY backend/docker-entrypoint.sh ./docker-entrypoint.sh

# Build the application if needed (for TypeScript compilation, etc.)
RUN npm run build || true

FROM base AS runner
WORKDIR /app

# Set environment
ENV NODE_ENV=production
ENV PORT=8000

# Copy production dependencies
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist || true
COPY --from=builder --chown=nextjs:nodejs /app/src ./src
COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nextjs:nodejs /app/docker-entrypoint.sh ./docker-entrypoint.sh
RUN chmod +x ./docker-entrypoint.sh
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads && \
    chown -R nextjs:nodejs /app/logs /app/uploads

# Switch to non-root user
USER nextjs

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Use dumb-init to handle signals properly and custom entrypoint for secrets
ENTRYPOINT ["dumb-init", "--", "./docker-entrypoint.sh"]
CMD ["npm", "start"]